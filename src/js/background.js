import "../img/icon-34.png";
import "../img/icon-128.png";

import browser from "webextension-polyfill";
import micropub from "./modules/micropub";

const errorNotification = message => {
  browser.notifications.create("grantcodes-error", {
    type: "basic",
    iconUrl: browser.extension.getURL("icon-128.png"),
    title: "Error",
    message: message
  });
};

// browser.tabs.onCreated.addListener(tab => {
//   if (tab.active && tab.url.indexOf("http") !== 1) {
//     console.log("New tab page please");
//   }
// });

const bookmarkToMf2 = bookmark =>
  new Promise((resolve, reject) => {
    bookmarks
      .getLocal()
      .then(bookmarks => {
        if (bookmark !== Object(bookmark)) {
          bookmark = bookmarks.find(item => item.id == bookmark);
        }
        let mf2 = {
          type: ["h-entry"],
          properties: {
            name: [bookmark.title],
            "bookmark-of": [bookmark.url],
            visibility: ["unlisted"],
            content: [
              `Bookmark of ${
                bookmark.url
              } automatically generated by an extension`
            ]
          }
        };
        let categories = [];
        if (bookmark.parentId) {
          const parent = bookmarks.find(b => b.id == bookmark.parentId);
          if (parent && parent.title) {
            if (parent.title.indexOf("/") > -1) {
              categories.push(parent.title);
            }
            parent.title.split("/").forEach(cat => categories.push(cat));
          }
        }
        if (categories.length) {
          mf2.properties.category = categories;
        }
        resolve(mf2);
      })
      .catch(err => reject(err));
  });

let mf2Bookmarks = {};
browser.bookmarks.onCreated.addListener((id, bookmark) => {
  if (bookmark.url && bookmark.title) {
    bookmarkToMf2(bookmark).then(mf2 => {
      micropub
        .create(mf2)
        .then(url => {
          console.log(url);
          mf2Bookmarks[id] = url;
          browser.notifications.create("grantcodes-bookmark", {
            type: "basic",
            iconUrl: browser.extension.getURL("icon-128.png"),
            title: "New Bookmark",
            message: "Created at " + url
          });
        })
        .catch(err => {
          console.log(err);
          errorNotification(err.message);
        });
    });
  }
});

// Need to look for updates as a lot of browsers will update the bookmark when you change folders
browser.bookmarks.onMoved.addListener((id, bookmark) => {
  if (mf2Bookmarks[id]) {
    bookmarkToMf2(id).then(mf2 => {
      const update = {
        replace: {
          category: mf2.properties.category
        }
      };
      micropub
        .update(mf2Bookmarks[id], update)
        .then(url => {
          browser.notifications.create("grantcodes-bookmark", {
            type: "basic",
            iconUrl: browser.extension.getURL("icon-128.png"),
            title: "Moved Bookmark",
            message: "Successfully updated bookmark post categories"
          });
        })
        .catch(err => {
          console.log(err);
          errorNotification(err.message);
        });
    });
  }
});

// Need to watch for headers from the micropub & media endpoint because they cannot be read by default.
let lastLocation = null;
browser.webRequest.onHeadersReceived.addListener(
  e => {
    const locationHeader = e.responseHeaders.find(
      header => header.name.toLowerCase() == "location"
    );
    if (locationHeader) {
      lastLocation = locationHeader.value;
    } else {
      lastLocation = null;
    }
    return Promise.resolve({ responseHeaders: e.responseHeaders });
  },
  {
    urls: [
      "https://grant.codes/micropub/micropub",
      "https://grant.codes/micropub/media"
    ]
  },
  ["blocking", "responseHeaders"]
);

// Listen for messages.
browser.runtime.onMessage.addListener((request, sender) => {
  switch (request.action) {
    case "getLastLocation": {
      return Promise.resolve({ location: lastLocation });
      break;
    }
    default: {
      break;
    }
  }
});
